plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

static String generateBuildTime() {
    return new Date().format("yyyy_MM_dd_HH_mm_ss", TimeZone.getTimeZone('Asia/Shanghai'))
}

static String generateBuildConfigTime() {
    return new Date().format("yyyy-MM-dd HH:mm:ss", TimeZone.getTimeZone('Asia/Shanghai'))
}

void generateBuildConfigField(String type, String fieldName, Object value) {
    if (type == "String") {
        android.defaultConfig.buildConfigField(type, fieldName, "\"$value\"")
    } else if (type == "boolean") {
        android.defaultConfig.buildConfigField(type, fieldName, Boolean.parseBoolean(value))
    } else {
        android.defaultConfig.buildConfigField(type, fieldName, value)
    }
}

android {
    compileSdk compileSdkVersionExt.toInteger()
    buildToolsVersion buildToolsVersionExt.toString()
    defaultConfig {
        applicationId applicationIdExt.toString()
        minSdk minSdkVersionExt.toInteger()
        targetSdk targetSdkVersionExt.toInteger()
        versionCode versionCodeExt.toInteger()
        versionName versionNameExt.toString()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        resConfigs 'zh'
        vectorDrawables {
            useSupportLibrary true
        }
        applicationVariants.all { variant ->
            variant.outputs.all {
                outputFileName = "chat_${variant.name}_versionCode_${versionCode}_versionName_${versionName}_${generateBuildTime()}.apk"
            }
        }
        generateBuildConfigField("String", "BUILD_TIME", generateBuildConfigTime())
        generateBuildConfigField("String", "VERSION_NAME", versionName)
    }
    signingConfigs {
        releaseConfig {
            storeFile file("..\\key.jks")
            keyAlias keyAliasExt.toString()
            storePassword keyPasswordExt.toString()
            keyPassword storePasswordExt.toString()
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'arm64-v8a', 'x86'
            }
        }
        release {
            signingConfig signingConfigs.releaseConfig
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk {
                abiFilters 'arm64-v8a'
            }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += [
                "-Xjvm-default=all",
                "-Xallow-jvm-ir-dependencies",
                "-Xskip-prerelease-check",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xuse-experimental=androidx.compose.animation.ExperimentalAnimationApi",
                "-Xopt-in=androidx.compose.material.ExperimentalMaterialApi",
                "-Xopt-in=androidx.compose.foundation.ExperimentalFoundationApi",
                "-Xopt-in=com.google.accompanist.insets.ExperimentalAnimatedInsets",
                "-Xopt-in=com.google.accompanist.pager.ExperimentalPagerApi",
                "-Xopt-in=androidx.compose.material3.ExperimentalMaterial3Api",
        ]
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        kotlinCompilerVersion kotlin_version
    }
    packagingOptions {
        exclude 'META-INF/com/android/build/gradle/*.properties'
        exclude 'META-INF/*.properties'
        exclude 'META-INF/*.version'
        exclude 'META-INF/{AL2.0,LGPL2.1}'
        exclude 'META-INF/*.md'
        exclude 'META-INF/CHANGES'
        exclude 'DebugProbesKt.bin'
        exclude 'kotlin-tooling-metadata.json'
    }
}

dependencies {
    testImplementation all_dependencie['androidx-junit']
    androidTestImplementation all_dependencie['androidx-test-ext']
    androidTestImplementation all_dependencie['androidx-espresso']
    implementation all_dependencie['androidx-appcompat']
    implementation all_dependencie['androidx-material']
    implementation all_dependencie['kotlinx-coroutines']
    implementation all_dependencie['compose-coil']
    implementation all_dependencie['compose-activity']
    implementation all_dependencie['compose-lifecycle-viewmodel']
    implementation all_dependencie['compose-constraintlayout']
    implementation all_dependencie['compose-navigation']
    implementation all_dependencie['compose-material']
    implementation all_dependencie['compose-material-icons']
    implementation all_dependencie['compose-material3']
    implementation all_dependencie['compose-livedata']
    implementation all_dependencie['compose-ui']
    implementation all_dependencie['compose-ui-tooling']
    androidTestImplementation all_dependencie['compose-ui-test-junit4']
    implementation all_dependencie['accompanist-insets']
    implementation all_dependencie['accompanist-systemuicontroller']
    implementation all_dependencie['accompanist-navigation-animation']
    implementation project(path: ':base')
    implementation project(path: ':proxy')
}